@page "/skill"
@using PortFolioPolLESSIRE0Blazor.Models;

<span class="fas fa-certificate me-2"></span> Skills

<h3>Skills List</h3>

<div @ref="ScrollContainerRef" @onscroll="HandleScroll" style="height: 300px; overflow-y: auto; border: 1px solid #444;">
    <table class="table table-striped table-dark">
        <thead>
            <tr>
                <th>Name</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (SkillModel sk in Skills)
            {
                <tr>
                    <td>•</td>
                    <td>@sk.Name</td>
                    <td><button class="btn btn-sm btm-outline-info" @onclick="() => ClickInfo(sk.Id)">Info</button></td>
                </tr>
            }
        </tbody>
    </table>
</div>


<hr />

@if(SelectedId > 0)
{
    <div>
        <SkillDetail id="SelectedId"></SkillDetail>
    </div>
}

<hr />

<script src="https://cdn.jsdelivr.net/npm/tsparticles"></script>

@code {
#nullable disable
    private List<SkillModel> allSkills = new(); 
    private List<SkillModel> visibleSkills = new(); 
    private int batchSize = 5;
    private int currentIndex = 0;
    private ElementReference ScrollContainerRef;

    protected override void OnInitialized()
    {
        for (int i = 1; i <= 50; i++)
        {
            allSkills.Add(new SkillModel { Id = i, Name = $"Skill {i}" });
        }

        LoadMoreItems();
    }

    private void LoadMoreItems()
    {
        var nextItems = allSkills.Skip(currentIndex).Take(batchSize);
        visibleSkills.AddRange(nextItems);
        currentIndex += batchSize;
    }

    private async Task HandleScroll()
    {
        var scrollTop = await JS.InvokeAsync<int>("getScrollTop", ScrollContainerRef);
        var scrollHeight = await JS.InvokeAsync<int>("getScrollHeight", ScrollContainerRef);
        var clientHeight = await JS.InvokeAsync<int>("getClientHeight", ScrollContainerRef);

        if (scrollTop + clientHeight >= scrollHeight - 5)
        {
            if (currentIndex < allSkills.Count)
            {
                LoadMoreItems();
                StateHasChanged();
            }
        }
    }

    [Inject]
    private IJSRuntime JS { get; set; }
}





































@* Copyrite https://github.com/POLLESSI
 *@